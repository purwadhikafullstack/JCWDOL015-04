// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum for User role
enum UserRole {
  normal
  candidate
  admin
  developer
}

// Enum for Application Status
enum ApplicationStatus {
  pending
  accepted
  rejected
}

// Enum for Interview Status
enum InterviewStatus {
  scheduled
  completed
  canceled
}

// Enum for Subscription Status
enum SubscriptionStatus {
  active
  inactive
}

// Enum for Assessment Status
enum AssessmentStatus {
  passed
  failed
}

// Enum for Question Type
enum QuestionType {
  multiple_choice
  true_false
  open_ended
}

// Enum for Difficulty Level
enum DifficultyLevel {
  easy
  medium
  hard
}

// Enum for Notification Type
enum NotificationType {
  application
  interview
  subscription
}

// Enum for Proficiency Level
enum ProficiencyLevel {
  beginner
  intermediate
  advanced
}

// Enum for Log Status
enum LogStatus {
  success
  failure
}

// Enum for Report Status
enum ReportStatus {
  pending
  resolved
  dismissed
}

// Enum for Device Type
enum DeviceType {
  desktop
  mobile
  tablet
}

// Enum for Transaction Status
enum TransactionStatus {
  pending
  completed
  failed
}

// Enum for Payment Method
enum PaymentMethod {
  bank_transfer
  credit_card
  paypal
}

// Enum for Interview Type
enum InterviewType {
  in_person
  virtual
}

// Enum for Education
enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATES
  BACHELORS
  MASTERS
  DOCTORATE
  DIPLOMA
  VOCATIONAL
  CERTIFICATION
  SOME_COLLEGE
  POSTGRADUATE
}

// Enum for Gender
enum Gender {
  MALE
  FEMALE
  OTHER
}

// Enum for Job Type
enum JobType {
  fullTime
  partTime
  freelance
  contractor
}

// Enum for Country Code
enum CountryCode {
  ID // Indonesia
  SG // Singapore
  MY // Malaysia
  US // United States
  GB // United Kingdom
  DE // Germany
  JP // Japan
  CN // China
}

// Enum for Job education
enum JobEducationLevel {
  high_school
  intermediate
  graduate
  bachelor_degree
  master_degree
  doctor_degree
}

// Enum for Job Experience
enum JobExperience {
  entry_level
  mid_level
  senior_level
  expert
}

// Enum for Job Category
enum JobCategory {
  software_engineering
  data_science
  machine_learning
  artificial_intelligence
  cybersecurity
  business_intelligence
  cyber_security
  product_management
  marketing
  design
  finance
  accounting
  legal
  management
  human_resources
  customer_service
  sales
  legal_and_compliance
  management_and_leadership
  public_relations
}

// User model
model User {
  user_id             Int             @id @default(autoincrement())
  email               String          @unique
  password            String
  role                UserRole
  first_name          String
  last_name           String
  profile_picture     String?
  phone               String?
  website             String?
  linkedin            String?
  github              String?
  twitter             String?
  facebook            String?
  instagram           String?
  title               String?
  education           EducationLevel?
  biography           String?         @db.Text()
  location            String?
  skills              String?
  languages           String?
  nationality         String?
  gender              Gender?
  DateOfBirth         DateTime?
  resume              String?
  years_of_experience Int?
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  is_verified         Boolean

  // Relations
  applications            Application[]
  companies               Company[]                @relation("UserCompanies")
  skillAssessments        SkillAssessment[]
  reviews                 Review[]
  notifications           Notification[]
  subscriptions           Subscription[]
  userSkills              UserSkill[]
  adminLogs               AdminLog[]
  jobReports              JobReport[]
  jobViews                JobView[]
  jobSaves                JobSave[]
  paymentTransactions     PaymentTransaction[]
  userAssessmentResponses UserAssessmentResponse[]
  jobs                    Job[]
  SubscriptionType        SubscriptionType[]
  FeatureUsage            FeatureUsage[]
  CV                      CV[]

  @@index([email])
}

// Company model
model Company {
  company_id      Int         @id @default(autoincrement())
  company_name    String
  email           String      @unique
  phone           String?
  aboutUs         String?     @db.Text()
  linkedin        String?
  instagram       String?
  twitter         String?
  facebook        String?
  yearOfEstablish DateTime?
  IndustryType    String?
  TeamSize        Int?
  country         CountryCode
  address         String?
  website         String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  description     String?     @db.Text()
  logo            String?
  banner          String?

  // Relations
  jobs    Job[]
  reviews Review[]
  users   User[]   @relation("UserCompanies") // Back-reference to User with the same relation name

  @@index([email])
}

// Job model
model Job {
  job_id            Int                @id @default(autoincrement())
  job_title         String
  description       String             @db.Text()
  responsibility    String?            @db.Text()
  country           CountryCode
  location          String?
  salary            Int?
  jobType           JobType?
  jobCategory       JobCategory?
  jobEducationLevel JobEducationLevel?
  jobExperience     JobExperience?
  jobExpired_at     DateTime?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_active         Boolean

  // Relations
  company      Company       @relation(fields: [company_id], references: [company_id])
  company_id   Int
  applications Application[]
  jobReports   JobReport[]
  jobViews     JobView[]
  jobSaves     JobSave[]
  User         User?         @relation(fields: [userUser_id], references: [user_id])
  userUser_id  Int?

  @@index([company_id])
  @@index([is_active, jobCategory])
}

// Application model
model Application {
  application_id   Int               @id @default(autoincrement())
  resume           String?
  coverLetter      String?           @db.Text()
  expected_salary  Decimal?
  status           ApplicationStatus
  applied_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  interview_date   DateTime?
  interview_status InterviewStatus?

  // Relations
  job       Job         @relation(fields: [job_id], references: [job_id])
  job_id    Int
  user      User        @relation(fields: [user_id], references: [user_id])
  user_id   Int
  interview Interview[]

  @@index([job_id])
  @@index([user_id])
}

// Tipe Subscription
model SubscriptionType {
  subs_type_id Int     @id @default(autoincrement())
  type         String
  description  String
  price        Decimal
  features     Json
  is_recomend  Boolean @default(false)

  // Relations
  subscriptions      Subscription[]
  User               User?                @relation(fields: [User_id], references: [user_id])
  User_id            Int?
  PaymentTransaction PaymentTransaction[]
}

// Subscription model
model Subscription {
  subscription_id Int                 @id @default(autoincrement())
  start_date      DateTime?
  end_date        DateTime?
  status          SubscriptionStatus?
  payment_proof   Boolean?
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt
  amount          Decimal?

  // Relations
  user                 User?                @relation(fields: [user_id], references: [user_id])
  user_id              Int?
  subscriptionType     SubscriptionType     @relation(fields: [subscription_type_id], references: [subs_type_id])
  subscription_type_id Int
  paymentTransactions  PaymentTransaction[] // Back-reference to PaymentTransaction

  @@index([user_id])
  @@index([status, end_date])
}

// SkillAssessment model

// Review model
model Review {
  review_id                 Int      @id @default(autoincrement())
  rating                    Int?
  comment                   String?  @db.Text()
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  salary_estimate           Decimal?
  position                  String?
  workCultureRating         Int
  workLifeBalanceRating     Int
  facilitiesRating          Int
  careerOpportunitiesRating Int

  // Relations
  user       User    @relation(fields: [user_id], references: [user_id])
  user_id    Int
  company    Company @relation(fields: [company_id], references: [company_id])
  company_id Int

  @@index([company_id])
  @@index([user_id])
}

model SkillAssessment {
  assessment_id   Int              @id @default(autoincrement())
  badge           String?
  score           Int?
  status          AssessmentStatus
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  assessment_data String?
  assessment_date DateTime?
  feedback        String?

  // Relations
  user          User                     @relation(fields: [user_id], references: [user_id])
  user_id       Int
  questions     AssessmentQuestion[]
  userResponses UserAssessmentResponse[] // Back-reference to UserAssessmentResponse

  @@index([user_id, status])
}
// AssessmentQuestion model
model AssessmentQuestion {
  question_id      Int              @id @default(autoincrement())
  question_text    String           @db.Text()
  question_type    QuestionType
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  is_active        Boolean
  difficulty_level DifficultyLevel?
  points           Int?

  // Relations
  skillAssessment SkillAssessment          @relation(fields: [assessment_id], references: [assessment_id])
  assessment_id   Int
  answers         AssessmentAnswer[]
  userResponses   UserAssessmentResponse[] // Back-reference to UserAssessmentResponse

  @@index([assessment_id])
}

// AssessmentAnswer model
model AssessmentAnswer {
  answer_id   Int      @id @default(autoincrement())
  answer_text String
  is_correct  Boolean?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  question      AssessmentQuestion       @relation(fields: [question_id], references: [question_id])
  question_id   Int
  userResponses UserAssessmentResponse[] // Back-reference to UserAssessmentResponse

  @@index([question_id])
}

// UserAssessmentResponse model
model UserAssessmentResponse {
  response_id Int      @id @default(autoincrement())
  answer_text String?  @db.Text()
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user            User               @relation(fields: [user_id], references: [user_id])
  user_id         Int
  question        AssessmentQuestion @relation(fields: [question_id], references: [question_id])
  question_id     Int
  answer          AssessmentAnswer?  @relation(fields: [answer_id], references: [answer_id])
  answer_id       Int?
  skillAssessment SkillAssessment    @relation(fields: [assessment_id], references: [assessment_id])
  assessment_id   Int

  @@index([user_id])
  @@index([question_id])
  @@index([assessment_id])
}

// Notification model
model Notification {
  notification_id Int              @id @default(autoincrement())
  user            User             @relation(fields: [user_id], references: [user_id])
  user_id         Int
  message         String
  is_read         Boolean
  type            NotificationType
  related_id      Int?
  link            String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  @@index([user_id])
}

// UserSkill model
model UserSkill {
  user_skill_id       Int               @id @default(autoincrement())
  user                User              @relation(fields: [user_id], references: [user_id])
  user_id             Int
  skill_name          String
  years_of_experience Int?
  proficiency_level   ProficiencyLevel?
  certification       String?
  description         String?
  is_verified         Boolean
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt

  @@index([user_id])
}

// AdminLog model
model AdminLog {
  log_id           Int        @id @default(autoincrement())
  action           String
  timestamp        DateTime   @default(now())
  details          String?
  ip_address       String?
  user_agent       String?
  status           LogStatus?
  affected_user_id Int?
  admin            User       @relation(fields: [admin_id], references: [user_id])
  admin_id         Int
  affected_job_id  Int?

  @@index([admin_id])
}

// JobReport model
model JobReport {
  report_id       Int          @id @default(autoincrement())
  job             Job          @relation(fields: [job_id], references: [job_id])
  job_id          Int
  user            User         @relation(fields: [user_id], references: [user_id])
  user_id         Int
  reason          String
  status          ReportStatus
  admin_response  String?
  is_anonymous    Boolean
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  resolution_date DateTime?

  @@index([job_id])
  @@index([user_id])
}

// JobView model
model JobView {
  view_id     Int         @id @default(autoincrement())
  job         Job         @relation(fields: [job_id], references: [job_id])
  job_id      Int
  user        User?       @relation(fields: [user_id], references: [user_id])
  user_id     Int?
  viewed_at   DateTime    @default(now())
  ip_address  String?
  user_agent  String?
  location    String?
  device_type DeviceType?
  referrer    String?
  session_id  String?

  @@index([job_id])
}

// JobSave model
model JobSave {
  save_id         Int       @id @default(autoincrement())
  job             Job       @relation(fields: [job_id], references: [job_id])
  job_id          Int
  user            User      @relation(fields: [user_id], references: [user_id])
  user_id         Int
  saved_at        DateTime  @default(now())
  is_favorite     Boolean
  notes           String?
  expiration_date DateTime?
  reminder_set    Boolean
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@index([job_id])
  @@index([user_id])
}

// PaymentTransaction model
model PaymentTransaction {
  transaction_id       Int               @id @default(autoincrement())
  user                 User              @relation(fields: [user_id], references: [user_id])
  user_id              Int
  amount               Decimal
  transaction_date     DateTime          @default(now())
  status               TransactionStatus @default(pending)
  payment_method       PaymentMethod?    @default(bank_transfer)
  receipt              String?
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  subscription_id      Int?
  subscription         Subscription?     @relation(fields: [subscription_id], references: [subscription_id])
  subscriptionType     SubscriptionType  @relation(fields: [subscription_type_id], references: [subs_type_id])
  subscription_type_id Int

  @@index([user_id])
}

// Interview model
model Interview {
  interview_id     Int             @id @default(autoincrement())
  application      Application     @relation(fields: [application_id], references: [application_id])
  application_id   Int
  scheduled_time   DateTime
  status           InterviewStatus
  feedback         String?         @db.Text()
  interviewer_name String?
  interview_link   String?
  interview_type   InterviewType?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  @@index([application_id])
}

model FeatureUsage {
  id           Int      @id @default(autoincrement())
  user_id      Int
  feature_name String
  used_at      DateTime @default(now())

  // Relasi ke User
  user User @relation(fields: [user_id], references: [user_id])

  @@index([user_id, feature_name])
}

model CV {
  cv_id      Int      @id @default(autoincrement())
  user_id    Int
  template   String   @default("ATS")
  content    Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}
