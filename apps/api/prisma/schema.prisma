generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  normal
  candidate
  admin
  developer
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

enum InterviewStatus {
  scheduled
  completed
  canceled
}

enum SubscriptionStatus {
  active
  inactive
}

enum AssessmentStatus {
  passed
  failed
}

enum QuestionType {
  multiple_choice
  true_false
  open_ended
}

enum DifficultyLevel {
  easy
  medium
  hard
}

enum NotificationType {
  application
  interview
  subscription
}

enum ProficiencyLevel {
  beginner
  intermediate
  advanced
}

enum LogStatus {
  success
  failure
}

enum ReportStatus {
  pending
  resolved
  dismissed
}

enum DeviceType {
  desktop
  mobile
  tablet
}

enum TransactionStatus {
  pending
  completed
  failed
}

enum PaymentMethod {
  bank_transfer
  credit_card
  paypal
}

enum InterviewType {
  in_person
  virtual
}

enum EducationLevel {
  HIGH_SCHOOL
  ASSOCIATES
  BACHELORS
  MASTERS
  DOCTORATE
  DIPLOMA
  VOCATIONAL
  CERTIFICATION
  SOME_COLLEGE
  POSTGRADUATE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum JobType {
  fullTime
  partTime
  freelance
  contractor
}

enum CountryCode {
  ID
  SG
  MY
  US
  GB
  DE
  JP
  CN
}

enum JobEducationLevel {
  high_school
  intermediate
  graduate
  bachelor_degree
  master_degree
  doctor_degree
}

enum JobExperience {
  entry_level
  mid_level
  senior_level
  expert
}

enum JobCategory {
  software_engineering
  data_science
  machine_learning
  artificial_intelligence
  cybersecurity
  business_intelligence
  cyber_security
  product_management
  marketing
  design
  finance
  accounting
  legal
  management
  human_resources
  customer_service
  sales
  legal_and_compliance
  management_and_leadership
  public_relations
}

model User {
  user_id                Int                      @id @default(autoincrement())
  email                  String                   @unique
  password               String
  role                   UserRole
  first_name             String
  last_name              String
  profile_picture        String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  is_verified            Boolean
  DateOfBirth            DateTime?
  biography              String?                  @db.Text
  education              EducationLevel?
  gender                 Gender?
  languages              String?
  location               String?
  nationality            String?
  phone                  String?
  resume                 String?
  skills                 String?
  title                  String?
  website                String?
  years_of_experience    Int?
  facebook               String?
  github                 String?
  instagram              String?
  linkedin               String?
  twitter                String?
  adminLogs              AdminLog[]
  applications           Application[]
  CV                     CV[]
  FeatureUsage           FeatureUsage[]
  jobs                   Job[]
  jobReports             JobReport[]
  jobSaves               JobSave[]
  jobViews               JobView[]
  notifications          Notification[]
  paymentTransactions    PaymentTransaction[]
  reviews                Review[]
  subscriptions          Subscription[]
  SubscriptionType       SubscriptionType[]
  UserAssessmentResponse UserAssessmentResponse[]
  userSkills             UserSkill[]
  companies              Company[]                @relation("UserCompanies")
  SkillAssessment        SkillAssessment[]

  @@index([email])
}

model Company {
  company_id      Int         @id @default(autoincrement())
  company_name    String
  email           String      @unique
  phone           String?
  address         String?
  website         String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  description     String?     @db.Text
  logo            String?
  IndustryType    String?
  TeamSize        Int?
  aboutUs         String?     @db.Text
  banner          String?
  yearOfEstablish DateTime?
  country         CountryCode
  facebook        String?
  instagram       String?
  linkedin        String?
  twitter         String?
  jobs            Job[]
  reviews         Review[]
  users           User[]      @relation("UserCompanies")

  @@index([email])
}

model Job {
  job_id            Int                @id @default(autoincrement())
  job_title         String
  description       String             @db.Text
  location          String?
  salary            Int?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_active         Boolean
  company_id        Int
  userUser_id       Int?
  country           CountryCode
  jobExperience     JobExperience?
  jobType           JobType?
  jobCategory       JobCategory?
  jobEducationLevel JobEducationLevel?
  responsibility    String?            @db.Text
  jobExpired_at     DateTime?
  applications      Application[]
  company           Company            @relation(fields: [company_id], references: [company_id])
  User              User?              @relation(fields: [userUser_id], references: [user_id])
  jobReports        JobReport[]
  jobSaves          JobSave[]
  jobViews          JobView[]

  @@index([company_id])
  @@index([is_active, jobCategory])
  @@index([userUser_id], map: "Job_userUser_id_fkey")
}

model Application {
  application_id   Int               @id @default(autoincrement())
  resume           String?
  expected_salary  Decimal?
  status           ApplicationStatus
  applied_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  interview_date   DateTime?
  interview_status InterviewStatus?
  job_id           Int
  user_id          Int
  coverLetter      String?           @db.Text
  job              Job               @relation(fields: [job_id], references: [job_id])
  user             User              @relation(fields: [user_id], references: [user_id])
  interview        Interview[]

  @@index([job_id])
  @@index([user_id])
}

model SubscriptionType {
  subs_type_id       Int                  @id @default(autoincrement())
  type               String
  description        String
  price              Decimal
  features           Json
  User_id            Int?
  is_recomend        Boolean              @default(false)
  PaymentTransaction PaymentTransaction[]
  subscriptions      Subscription[]
  User               User?                @relation(fields: [User_id], references: [user_id])

  @@index([User_id], map: "SubscriptionType_User_id_fkey")
}

model Subscription {
  subscription_id      Int                  @id @default(autoincrement())
  start_date           DateTime?
  end_date             DateTime?
  status               SubscriptionStatus?
  payment_proof        Boolean?
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  amount               Decimal?
  user_id              Int?
  subscription_type_id Int
  paymentTransactions  PaymentTransaction[]
  subscriptionType     SubscriptionType     @relation(fields: [subscription_type_id], references: [subs_type_id])
  user                 User?                @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([status, end_date])
  @@index([subscription_type_id], map: "Subscription_subscription_type_id_fkey")
}

model Review {
  review_id                 Int      @id @default(autoincrement())
  rating                    Decimal?
  comment                   String?  @db.Text
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  salary_estimate           Decimal?
  position                  String?
  user_id                   Int
  company_id                Int
  careerOpportunitiesRating Int
  facilitiesRating          Int
  workCultureRating         Int
  workLifeBalanceRating     Int
  company                   Company  @relation(fields: [company_id], references: [company_id])
  user                      User     @relation(fields: [user_id], references: [user_id])

  @@index([company_id])
  @@index([user_id])
}

model SkillAssessment {
  assessment_id   Int              @id @default(autoincrement())
  badge           String?
  score           Int?
  status          AssessmentStatus
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  assessment_data String?
  assessment_date DateTime?
  feedback        String?

  // Relations
  user          User                     @relation(fields: [user_id], references: [user_id])
  user_id       Int
  questions     AssessmentQuestion[]
  userResponses UserAssessmentResponse[] // Back-reference to UserAssessmentResponse

  @@index([user_id, status])
}

model AssessmentQuestion {
  question_id            Int                      @id @default(autoincrement())
  question_text          String                   @db.Text
  question_type          QuestionType             @default(multiple_choice)
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  is_active              Boolean
  difficulty_level       DifficultyLevel?
  points                 Int?
  assessment_id          Int
  answers                AssessmentAnswer[]
  skillAssessment        SkillAssessment          @relation(fields: [assessment_id], references: [assessment_id], onDelete: Cascade)
  UserAssessmentResponse UserAssessmentResponse[]

  @@index([assessment_id])
}

model AssessmentAnswer {
  answer_id              Int                      @id @default(autoincrement())
  answer_text            String
  is_correct             Boolean?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  question_id            Int
  question               AssessmentQuestion       @relation(fields: [question_id], references: [question_id], onDelete: Cascade)
  UserAssessmentResponse UserAssessmentResponse[]

  @@index([question_id])
}

model UserAssessmentResponse {
  response_id Int      @id @default(autoincrement())
  answer_text String?  @db.Text()
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user            User               @relation(fields: [user_id], references: [user_id])
  user_id         Int
  question        AssessmentQuestion @relation(fields: [question_id], references: [question_id])
  question_id     Int
  answer          AssessmentAnswer?  @relation(fields: [answer_id], references: [answer_id])
  answer_id       Int?
  skillAssessment SkillAssessment    @relation(fields: [assessment_id], references: [assessment_id])
  assessment_id   Int

  @@index([user_id])
  @@index([question_id])
  @@index([assessment_id])
}

model Notification {
  notification_id Int              @id @default(autoincrement())
  user_id         Int
  message         String
  is_read         Boolean
  type            NotificationType
  related_id      Int?
  link            String?
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  user            User             @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model UserSkill {
  user_skill_id       Int               @id @default(autoincrement())
  user_id             Int
  skill_name          String
  years_of_experience Int?
  proficiency_level   ProficiencyLevel?
  certification       String?
  description         String?
  is_verified         Boolean
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  user                User              @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model AdminLog {
  log_id           Int        @id @default(autoincrement())
  action           String
  timestamp        DateTime   @default(now())
  details          String?
  ip_address       String?
  user_agent       String?
  status           LogStatus?
  affected_user_id Int?
  admin_id         Int
  affected_job_id  Int?
  admin            User       @relation(fields: [admin_id], references: [user_id])

  @@index([admin_id])
}

model JobReport {
  report_id       Int          @id @default(autoincrement())
  job_id          Int
  user_id         Int
  reason          String
  status          ReportStatus
  admin_response  String?
  is_anonymous    Boolean
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  resolution_date DateTime?
  job             Job          @relation(fields: [job_id], references: [job_id])
  user            User         @relation(fields: [user_id], references: [user_id])

  @@index([job_id])
  @@index([user_id])
}

model JobView {
  view_id     Int         @id @default(autoincrement())
  job_id      Int
  user_id     Int?
  viewed_at   DateTime    @default(now())
  ip_address  String?
  user_agent  String?
  location    String?
  device_type DeviceType?
  referrer    String?
  session_id  String?
  job         Job         @relation(fields: [job_id], references: [job_id])
  user        User?       @relation(fields: [user_id], references: [user_id])

  @@index([job_id])
  @@index([user_id], map: "JobView_user_id_fkey")
}

model JobSave {
  save_id         Int       @id @default(autoincrement())
  job_id          Int
  user_id         Int
  saved_at        DateTime  @default(now())
  is_favorite     Boolean
  notes           String?
  expiration_date DateTime?
  reminder_set    Boolean
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  job             Job       @relation(fields: [job_id], references: [job_id])
  user            User      @relation(fields: [user_id], references: [user_id])

  @@index([job_id])
  @@index([user_id])
}

model PaymentTransaction {
  transaction_id       Int               @id @default(autoincrement())
  user_id              Int
  amount               Decimal
  transaction_date     DateTime          @default(now())
  status               TransactionStatus @default(pending)
  payment_method       PaymentMethod?    @default(bank_transfer)
  receipt              String?
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  subscription_id      Int?
  subscription_type_id Int
  subscription         Subscription?     @relation(fields: [subscription_id], references: [subscription_id])
  subscriptionType     SubscriptionType  @relation(fields: [subscription_type_id], references: [subs_type_id])
  user                 User              @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([subscription_id], map: "PaymentTransaction_subscription_id_fkey")
  @@index([subscription_type_id], map: "PaymentTransaction_subscription_type_id_fkey")
}

model Interview {
  interview_id     Int             @id @default(autoincrement())
  application_id   Int
  scheduled_time   DateTime
  status           InterviewStatus
  feedback         String?         @db.Text
  interviewer_name String?
  interview_link   String?
  interview_type   InterviewType?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  application      Application     @relation(fields: [application_id], references: [application_id])

  @@index([application_id])
}

model FeatureUsage {
  id           Int      @id @default(autoincrement())
  user_id      Int
  feature_name String
  used_at      DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id, feature_name])
}

model CV {
  cv_id      Int      @id @default(autoincrement())
  user_id    Int
  template   String   @default("ATS")
  content    Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}